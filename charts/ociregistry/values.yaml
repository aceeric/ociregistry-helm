# image is the server image. Specify tag or digest.
image:
  registry: quay.io
  repository: appzygy/ociregistry
  tag: 1.0.0
  digest:
  pullPolicy: IfNotPresent

# imagePullSecrets are for pulling this servers image from
# a registry that requires authentication
imagePullSecrets: []

# nameOverride overrides the default naming logic that concats the
# release and chart name.
nameOverride: ""

# fullnameOverride overrides the default naming logic that concats the
# release and chart name.
fullnameOverride: ""

# configs result in command line args being templated into the server
# Deployment spec to change default behavior. The defaults that are coded into
# the server go code are shown below. To override, uncomment and re-define the values.
# The configPath does not need to be defined if upstreamConfig is defined. However, if
# you specify both, the 'configPath' value must match 'upstreamConfig.mountPath'. If
# you change the port, you must also change the 'service.port' value to match.
configs:
  #logLevel: error
  #port: 8080
  #configPath:
  #imagePath: /var/lib/ociregistry
  #pullTimeout: 60000

# serviceAccount defines the service account configuration.
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

podAnnotations: {}
podLabels: {}
podSecurityContext: {}
securityContext: {}

# service defines the Service resource. Since the intended use case
# is for you to configure containerd to mirror to the registry server,
# the server has to be reachable by containerd running on the host. Therefore
# the default configuration is to create a NodePort service, which
# makes the registry available to containerd on each host. Each containerd instance
# can be configured to mirror to the registry using its own hostname. E.g.:
#
# cat /etc/containerd/certs.d/_default/hosts.toml
#
# Result:
#
# [host."localhost:31080"]
#   capabilities = ["pull", "resolve"]
#   skip_verify = true
#
# if you change the 'port', you must also specify the 'configs.port' above.
service:
  type: NodePort
  port: 8080
  nodePort: 31080

# ingress configures an ingress for access to the registry outside the
# cluster. (Could be used to run the registry in one cluster to cache
# for multiple other clusters.)
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
  - host: chart-example.local
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls: []
  #- secretName: chart-example-tls
  #  hosts:
  #  - chart-example.local

# resources specify requests and limits. Manifests are cached in memory
# to speed response time. Manifests vary greatly in size but - if an average
# manifest is 3K and your cluster has 100 images this would result in the server
# using 300K of RAM.
resources: {}

# volumes lets you mount other volumes.
#volumes:
#- name: my-other-volume
#  emptyDir: {}

# volumeMounts provides the container mount paths. Since this is a caching
# registry it needs a place to store image data. The default in the server code
# is shown below. When you select a 'persistence' type, a volume will be templated
# named 'images'. By default the server will look in the path below. if you mount
# the storage at some other path you must change the 'configs.imagePath' to match.
volumeMounts:
- name: images
  mountPath: /var/lib/ociregistry
  readOnly: false

nodeSelector: {}
tolerations: []
affinity: {}

# persistence establishes the persistence strategy. For ephemeral storage (i.e. for
# testing or experimentation) enable the emptyDir option. If you have a storage
# provisioner enable the persistentVolumeClaim option. The hostPath option uses
# host storage.
persistence:
  persistentVolumeClaim:
    enabled: true
    claimName: registry
    spec:
      accessModes:
      - ReadWriteOnce
      volumeMode: Filesystem
      resources:
        requests:
          storage: 2Gi
      storageClassName:
      #selector:
      #  matchLabels: {}
      #  matchExpressions: []
  hostPath:
    enabled: false
    type: DirectoryOrCreate
    path: /var/lib/ociregistry
  emptyDir:
    enabled: false
    sizeLimit: 2Gi

# upstreamConfig supports providing auth and TLS configuration
# for upstream registries. If not provided, then all upstreams will
# be tried as anonymous.
#upstreamConfig:
#  mountPath: /var/ociregistry/config
#  registries:
#  - name: my-upstream:8800
#    description: Basic auth, mTLS with mounted CA
#    auth:
#      user: frobozz
#      password: flathead
#    tls:
#      ca:   /etc/pki/certs/ca.crt
#      cert: /etc/pki/certs/client.crt
#      key:  /etc/pki/certs/client.key
